### Extract Test Features for use in Classification Pipelines ###

## Follow-Along ##
from sklearn.model_selection import train_test_Split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
import pandas as pd

# Read locally saved file
df_yelp = pd.read_csv('yelp_labelled.txt', names=['sentence', 'label'], sep='\t')
print(df_yelp.head())

# Import train_test_split

# Create the feature and target variables
sentences = df_yelp['sentence']
y = df_yelp['label']

# Train_Test_Split
sentences_train, sentences_test, y_train, y_test = train_test_Split(
    sentences, y, test_size=0.25, random_state=42)

# Now we have a List of sentences
# Train_Test_Split before vectorization

# Import the tf-idf vectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

# Instantiate
vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(2, 2))
vectorizer.fit(sentences_train)

# Vectorize the training and test data
X_train = vectorizer.transform(sentences_train)
X_test = vectorizer.transform(sentences_test)

# Display
print(X_train)

'''
outcome:
<750x2864 sparse matrix of type '<class 'numpy.float64'>'
with 3051 stored elements in Compressed Sparse Row format>
'''

# Import the classifier

# Instantiate
classifier = LogisticRegression(solver='lbfgs')

classifier.fit(X_train, y_train)
score = classifier.score(X_test, y_test)

print("Accuracy:", score)

'''
outcome: (Decent accuracy with LG model)
Accuracy: 0.588
'''

# Make Pipeline

# Define pipeline
pipe = Pipeline([('vect', vectorizer),
                 ('clf', classifier)
                 ])

# Define the parameter space for grid
parameters = {'clf_C': [1, 10, 1000000]} # Regularization strength

# Implement a grid with cross-val
# Import GridSearchCV

grid_search = GridSearchCV(pipe, parameters, cv=5, n_jobs=-1, verbose=1)
grid_search.fit(sentences, y)

# Print out Best Score
print(grid_search.best_score_)

'''
outcome: (Improved Accuracy)
Fitting 5 folds for each of 3 candidates, totalling 15 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 12 concurrent workers.
[Parallel(n_jobs=-1)]: Done   8 out of  15 | elapsed:    2.3s remaining:    2.0s
[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    2.4s finished





0.611
'''
